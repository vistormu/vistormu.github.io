@doc.head{}

@doc.nav{}

@sec.h1{Create a Python Virtual Environment with Conda}

@post.info{
<published> oct 11th 2023
}{
<last_edit> oct 11th 2023
}{
<read_time> 8
}

It is very important to be organized when working on a project. This is especially true when working with Python, as it is very easy to get lost in the dependencies and versions of the libraries. Not setting up a virtual environment means overriding dependencies every time you install a new library, more often than not, resulting in code not working.

In this blog post, I will cover how to download and set up a Conda environment for your Python projects. I will also cover how to manage the dependencies once the virtual environment is running.

Also, I will assume that you are using a Linux distribution. If you are using Windows, I recommend installing the Windows Subsystem for Linux (WSL) and following the instructions as if you were using Linux.

@sec.h2{Table of Contents}

@post.toc{
Installing Conda
Creating a Virtual Environment
Installing Packages
}

@sec.h2{Installing Conda}

Conda is the most important virtual environment manager for Python. In particular, we will use @url{https://docs.conda.io/en/latest/miniconda.html}{Miniconda}, a minimal installation of Conda that works only on the command line. To install it, follow the following steps:.

1. Create a directory in the home folder called @txt.hl{miniconda3}:

@code.block{<file> terminal}{<lang> shell}{
mkdir -p ~/miniconda3
}

2. Download the installer from the official repository. Download the version for your operating system and architecture.

If you are using a @txt.hl{x86_64} architecture, run:

@code.block{<file> terminal}{<lang> shell}{
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\\
-O ~/miniconda3/miniconda.sh
}

If you are using an @txt.hl{arm64} architecture, run:

@code.block{<file> terminal}{<lang> shell}{
wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh \\\\
-O ~/miniconda3/miniconda.sh
}

3. Run the installer with your shell (@txt.hl{bash} or @txt.hl{zsh} usually):

@code.block{<file> terminal}{<lang> shell}{
bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3
}

4. Remove the installer:

@code.block{<file> terminal}{<lang> shell}{
rm -rf ~/miniconda3/miniconda.sh
}

5. Initialize Miniconda in your shell (@txt.hl{bash} or @txt.hl{zsh} again):

@code.block{<file> terminal}{<lang> shell}{
~/miniconda3/bin/conda init bash
}

6. Restart your shell and check that Miniconda is installed:

@code.block{<file> terminal}{<lang> shell}{
reset
conda --version
}

If everything went well, you should see the version of Conda installed.

Also, you can check that now there is a @txt.hl{(base)} in your shell. This means that you are in the base environment of Conda, which is the default environment that is created. Conda auto-activates it every time you open a terminal, which is quite annoying. Disable that feature by running this command:

@code.block{<file> terminal}{<lang> shell}{
conda config --set auto_activate_base false
}

@sec.h2{Creating a Virtual Environment}

Now that Conda is installed, we can create a virtual environment for our project. This is done with the @txt.hl{conda create} command. It is also very important to specify also a Python version, as it will install the @txt.hl{pip} package manager along with other useful things. I highly encourage installing a version of Python higher than @txt.hl{10.x.x} as it offers very good type hinting.

For example, to create an environment called @txt.hl{myenv} with Python 3.11.5, run:

@code.block{<file> terminal}{<lang> shell}{
conda create -n myenv python=3.11.5
}

You will be asked to confirm the installation. Type @txt.hl{y} and press @txt.hl{Enter}.

After the installation, you can activate the environment with:

@code.block{<file> terminal}{<lang> shell}{
conda activate myenv
}

You should see that your environment has been activated in the shell, as it will appear @txt.hl{(myenv)} at the left.

@sec.h2{Installing Packages}

Now that we have a virtual environment, we can install packages with @txt.hl{pip}. But before installing anything, it is very important to manually track the dependencies of your project. You could install all the packages you need directly, but then it will be very difficult to trace them back: packages depend on other packages, and these packages depend on a lot more... This results in your environment having lots of different packages and not knowing the ones that you firstly installed.

The cleanest way of installing packages is to create a @txt.hl{requirements.txt} in the directory of your project and add there the packages that you will use:

@code.block{<file> requirements.txt}{<lang> txt}{
numpy
pandas
matplotlib
}

To install them, just use

@code.block{<file> terminal}{<lang> shell}{
pip install -r requirements.txt
}

If you want to add more packages, add them to the @txt.hl{requirements.txt} file and repeat the @txt.hl{pip} installation.

It can also be helpful to freeze the version of each package, as it will be easier to reproduce the environment on another computer. I personally don't do this, but more than once, an update of a package made my code to have errors.

To do this, just write the version of each package in the @txt.hl{requirements.txt} file:

@code.block{<file> requirements.txt}{<lang> txt}{
numpy==1.21.2
pandas==1.3.3
matplotlib==3.4.3
}

And then install them with the @txt.hl{pip} command.

@sec.h2{Wrapping Up}

In this blog post, I have covered how to install Conda, create a virtual environment, and install packages. I hope that you find this information useful and that it helps you organize your projects better.

@sec.h2{Recommended Posts}

<div class="card-grid">

@card{
<title> write readable code in python
}{
<subtitle> \#python
}{
<description> Learn how to write readable code in Python to make it more maintainable and understandable.
}{
<date> nov 6th 2023
}{
<link> /tutorials/readable-code
}

@card{
<title> Using NamedTuple and Dataclass in Python
}{
<subtitle> \#python
}{
<description> Learn how to use NamedTuple and Dataclass to create more readable and maintainable code.
}{
<date> feb 18th 2024
}{
<link> /tutorials/named-tuple-dataclass
}

</div>

@doc.foot{}
