@header

@h1{How I Created the Syntax Highlighting for Proxima}

@post-info{
mar 7th 2024
}{
mar 7th 2024
}{
x
}

Seeing my new-born baby (@url{https://github.com/vistormu/proxima}{Proxima}) in white plain text was hard. I had to do something about it. I had to give it some color. I had to make it beautiful.

In this post, I will share with you how I created the syntax highlighting for Proxima using Tree-sitter and how I installed it in Neovim.

@h2{Table of Contents}

@toc{
Tree-sitter
}{
Create a Parser
}{
Installing Your Parser in Neovim
}

@h2{Tree-sitter}

Tree-sitter is a tool used to create parsers for programming languages. I is mostly used for giving syntax highlighting to most text editors (not looking at you, VSCode). It is fast, reliable, and written in Rust. However, making a parser is not trivial, and it can be a bit of a pain to install it in your text editor.

You need to take few steps to see your language in color. First, you need to create a parser for your language. I will follow the instructions in the @url{https://tree-sitter.github.io/tree-sitter/creating-parsers}{Tree-sitter Parsers} page to create a parser for Proxima. Then, you need to specify the syntax highlighting rules for your language. I will follow the instructions in the @url{https://tree-sitter.github.io/tree-sitter/syntax-highlighting}{Tree-sitter Syntax Highlighting} page to do that. Finally, you need to install the parser in your text editor, NeoVim in my case.

@h2{Create a Parser}

@h3{Dependencies and Installation}

Tree-sitter is quite peculiar, as it uses Rust, C and Node.js to generate the parser. Therefore, you need to have these tools installed in your system:

@list{
Rust: download it from @url{https://www.rust-lang.org/tools/install}{here}
}{
Node.js: download it from @url{https://nodejs.org/en/download/}{here}
}{
C compiler: download it from @url{https://gcc.gnu.org/install/}{here}
}

Once you have installed these tools, you can install the @mark{tree-sitter-cli} package using @mark{cargo}:

@code-block{terminal}{bash}{
cargo install tree-sitter-cli
}

@h3{Project Setup}

The convention is to name the parser repository as @mark{tree-sitter-\<language\>}, so I will name my repository as @mark{tree-sitter-proxima}.

@code-block{terminal}{bash}{
mkdir tree-sitter-proxima
cd tree-sitter-proxima
}

Then, initialize the repository with @mark{npm}:

@code-block{terminal}{bash}{
npm init
}

The tree-sitter parser depends on the npm package @mark{nan}, so you need to install it:

@code-block{terminal}{bash}{
npm install --save nan
}

Also, you need to install the @mark{tree-sitter} package:

@code-block{terminal}{bash}{
npm install --save-dev tree-sitter
}

Now, your project should look like this:

@code-block{}{ }{
tree-sitter-proxima/
├── binding.gyp
}

@h3{Creating the Grammar}

@h3{Testing the Parser}

@h2{Installing Your Parser in Neovim}

runtime path -> :set runtimepath?

usually in ~/.local/share/nvim/lazy/nvim-treesitter

queries/\{language\}/\{locals,highlights,textobjects\}.scm

TSInstall proxima

Text

@h2{Wrapping Up}

Text

@h2{References}

@list{
@url{https://github.com/nvim-treesitter/nvim-treesitter}{Neovim Treesitter}
}{
@url{https://tree-sitter.github.io/tree-sitter/creating-parsers}{Tree-sitter Parsers}
}{
@url{https://tree-sitter.github.io/tree-sitter/syntax-highlighting}{Tree-sitter Syntax Highlighting}
}

@footer
