@title{Vistor's Blog: How To Document Your Code}
@style{./../style.css}

@header

@h1
Document Your Python Code with Docstrings

@center
@subtitle{Published on @mark{nov 6th 2023}. Last edit on @mark{nov 6th 2023}}

@spacer

Documenting your code is an important part of the development process. It helps you and others understand what your code does and how to use it. In this post, you will learn how to document your Python code with docstrings.

I recommend you to read my previous blog post about the topic @url{./readable-code.html}{How To Write Readable Code in Python} before you continue with this post.

@spacer

@h2
Table of Contents

@list{
}{
}{
}

@spacer



@h2
What is a Docstring?

A docstring is a string literal that occurs as the first statement in a module, function, class, or method definition. It is used to document the code.

There are various styles of docstrings. The most common one is the @mark{Google} style. It is used by Google, but also by other companies and open-source projects.

The other one is the @mark{Numpy} style. It is used by the Numpy library and other scientific Python libraries.



@h2
Documenting Functions

What should you document in a function?

@list{
The purpose of the function.
}{
The parameters of the function.
}{
The return value of the function.
}{
The exceptions that the function may raise.
}{
Examples of how to use the function.
}

Google style:

@spacer

@pre
def function_name(param1: int, param2: str) -> bool:<br>
    """One-line summary of what the function does.<br>
<br>
    Extended description of the function.<br>
<br>
    Args:<br>
        param1 (int): Description of param1.<br>
        param2 (str): Description of param2.<br>
<br>
    Returns:<br>
        bool: Description of return value.<br>
<br>
    Raises:<br>
        ValueError: If param2 is equal to 'bad'.<br>
<br>
    Examples:<br>
        Examples should be written in doctest format, and should illustrate how<br>
        to use the function.<br>
<br>
        >>> print function_name(1, 'good')<br>
        True<br>
<br>
        >>> print function_name(2, 'bad')<br>
        Traceback (most recent call last):<br>
            ...<br>
        ValueError: 'bad' is not a valid param2<br>
    """<br>
    if param2 == 'bad':<br>
        raise ValueError(f'\{param2\} is not a valid param2')<br>
    return True<br>

NumPy style:

@spacer

@pre
def function_name(param1: int, param2: str) -> bool:<br>
    """One-line summary of what the function does.<br>
<br>
    Extended description of the function.<br>
<br>
    Parameters<br>
    ----------<br>
    param1 : int<br>
        Description of param1.<br>
    param2 : str<br>
        Description of param2.<br>
<br>
    Returns<br>
    -------<br>
    bool<br>
        Description of return value.<br>
<br>
    Raises<br>
    ------<br>
    ValueError<br>
        If param2 is equal to 'bad'.<br>
<br>
    Examples<br>
    --------<br>
    Examples should be written in doctest format, and should illustrate how<br>
    to use the function.<br>
<br>
    >>> print function_name(1, 'good')<br>
    True<br>
<br>
    >>> print function_name(2, 'bad')<br>
    Traceback (most recent call last):<br>
        ...<br>
    ValueError: 'bad' is not a valid param2<br>
    """<br>
    if param2 == 'bad':<br>
        raise ValueError(f'\{param2\} is not a valid param2')<br>
    return True<br>



@h2
Documenting Classes

What should you document in a class?

@list{
The purpose of the class.
}{
The attributes of the class.
}{
The methods of the class.
}

Each method should be documented as a function.



@h2
Documenting Modules

Hello



@h2
Wrapping Up

Hello



@h2
Recommended Posts

If you liked this post, you might also like

<div class="card-row">

@card{
How To Write Readable Code in Python
}{
Learn how to write readable code in Python to make it more maintainable and understandable.
}{
nov 6th 2023
}{
./readable-code.html
}

@card{
How To Create a Python Virtual Environment with Conda
}{
Learn how to create a Python Virtual Environment with Conda to manage your Python version and libraries.
}{
oct 11th 2023
}{
./conda.html
}

</div>

@footer
