@title{Vistor's Blog: PyPi Project}
@style{./../style.css}

@post-header

@vsp{10} @rectangle{red}{200}{left}{100}
@vsp{2} @rectangle{green}{100}{left}{48}

@h1
How to Upload a Python Package to PyPi

@center
@subtitle{Published on @mark{jan 23rd 2024}. Last edit on @mark{jan 23rd 2024}}

Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec euismod, nisl eget ultricies ultrices, nunc nunc aliquam nunc, nec aliquam nunc nunc nec nunc. Donec euismod, nisl eget ultricies ultrices, nunc nunc aliquam nunc, nec aliquam nunc nunc nec nunc. Donec euismod, nisl eget ultricies ultrices, nunc nunc aliquam nunc, nec aliquam nunc nunc nec nunc. Donec euismod, nisl eget ultricies ultrices, nunc nunc aliquam nunc, nec aliquam nunc nunc nec nunc.

@vsp{10} @rectangle{violet}{200}{right}{48}
@vsp{5} @rectangle{orange}{75}{right}{150}

@h2
Table of Contents

@list{
One
}{
Two
}{
Three
}

@h2
Project Structure

We will learn how to upload our project named "chorizo" to PyPi.

@pre
chorizo<br>
|-- chorizo<br>
|   |-- __init__.py<br>
|<br>
|-- LICENSE<br>
|-- pyproject.toml<br>
|-- README.md<br>
|-- requirements.txt<br>

@h2
Necessary Files

@h3
LICENSE

Check @url{https://choosealicense.com/} for more information.

I usually use the MIT license.

@file{LICENSE}

@pre
MIT License
<br><br>
Copyright (c) [year] [fullname]
<br><br>
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
<br><br>
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
<br><br>
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

@h3
README.md

@file{README.md}

@pre
\# chorizo
<br><br>
An example project named chorizo.

This file is used to describe your project.

@h3
pyproject.toml

We will use hatchling to build our project.

@file{pyproject.toml}

@pre
[build-system]<br>
requires = ["hatchling"]<br>
build-backend = "hatchling.build"<br>
<br>
[project]<br>
name = "chorizo"<br>
version = "0.0.1"<br>
authors = [<br>
  \{ name="Example Author", email="author\@example.com" \},<br>
]<br>
description = "An example project named chorizo."<br>
readme = "README.md"<br>
requires-python = ">=3.10"<br>
classifiers = [<br>
    "Programming Language :: Python :: 3",<br>
    "License :: OSI Approved :: MIT License",<br>
    "Operating System :: OS Independent",<br>
]<br>
dependencies = [<br>
    "numpy",<br>
]<br>
<br>
[project.urls]<br>
Homepage = "https://github.com/user/chorizo"<br>
Issues = "https://github.com/user/chorizo/issues"<br>

If you have multiple top-level directories, you need to specify which one contains the code.

@file{pyproject.toml}

@pre
[tool.hatch.build.targets.wheel]<br>
packages = ["chorizo"]

@h3
requirements.txt

It is also a good practice leaving a requirements.txt file with the dependencies of your project so it can be built easily from source.

@h3
.gitignore

As a bonus tip, you can add a .gitignore file to your project to avoid uploading unnecessary files to GitHub.

@file{.gitignore}

@pre
**/__pycache__<br>
/dist<br>
/build<br>
*.egg-info<br>

@h2
Build the Project

@h3
Required Packages

Text

@file{terminal}

@pre
pip install build twine

@h3
Building the project

@file{terminal}

@pre
python -m build

@h2
Upload the Project

@h3
Upload to TestPyPi

It is a good idea to upload first to the test server to check if everything is working as expected. Once you upload a realease, it cannot be deleted, so you ned to be careful.

Also, the TestPyPi server is not the same as the PyPi server, so you need to create an account there too. To register an account, go to @url{https://test.pypi.org/account/register/}.

Now you need a token to upload your project. To get a token, go to @url{https://test.pypi.org/manage/account/#api-tokens} and click on "Add API token". You will need to setup a Two-Factor-Autentification, which is a bit annoying, but follow the steps.

Finally, you can upload your project to the test server.

@file{terminal}

@pre
python -m twine upload --repository testpypi dist/*

@h3
Download and Test

You can download your project from the test server with pip.

@file{terminal}

@pre
pip install --index-url https://test.pypi.org/simple/ --no-deps chorizo

@h3
Upload to PyPi

Once you are sure that everything is working as expected, you can upload your project to the PyPi server.

You need now to register an account in @url{https://pypi.org/account/register/} and follow the same steps as before: enabling 2FA and generating a token.

@file{terminal}

@pre
python -m twine upload dist/*

@h3
Versioning

Tag your project with git

Edit the description of your release in GitHub

@h2
Wrapping Up

Section text.

@h2
Suggested Posts

<div class="card-row">

@card{
How to Setup NeoVim from Scratch
}{
Learn how to setup NeoVim from scratch, with a custom configuration and plugin.
}{
oct 11th 2023
}{
./neovim-config.html
}

</div>

@post-footer
