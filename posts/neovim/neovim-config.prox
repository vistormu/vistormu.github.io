@title{Vistor's Blog: NeoVim}
@style{/css/output.css}

@header

@rectangles{left}

@h1
Set Up Neovim from Scratch

@center
@subtitle{Published on @mark{feb 18th 2024}. Last edit on @mark{feb 18th 2024}}

If you are here it means that you have built the courage to try NeoVim like a real programmer. You won't ever need IDEs or wait for slow apps to open.

In this blog post I will explain how to set up a minimal and modular NeoVim configuration from scratch. I will also cover necessary installations in your system for a complete experience.

@rectangles{right}

@spacer

@h2
Table of Contents

@toc{
Other Resources
}{
My Configuration
}{
Installing Neovim
}{
Setting Up the Configuration
}{
Other Dependencies
}

@h2
Other Resources

Before we start with my configuration, I would like to recommend some other material from people that really know how to program.

A very popular Neovim configuration guide is @url{https://github.com/nvim-lua/kickstart.nvim}{kickstart.nvim}, made by TJ, a core member of the team of NeoVim.

Also, I highly recommend @url{https://www.youtube.com/watch?v=w7i4amO_zaE}{ThePrimeagen's video} on the topic, which is a thirty-minute video that covers everything you need to know. Watch it at 0.5x speed if you don't want to die from anxiety.

If you don't feel like configuring your own Neovim, there are many pre-configured Neovim distributions out there. The most popular ones are @url{https://github.com/NvChad/NvChad}{NvChad} and @url{https://github.com/LunarVim/LunarVim}{LunarVim}. However, consider that when using these bad bois you are mostly using the configurations of others.

@h2
My Configuration

At first, I was using the configuration of ThePrimeagen's video, but when i wanted to add something I was constantly missaccessing other directories. It wast a bit confusing for me. Then I checked @mark{kickstart.nvim}, but it was a single file, and I wanted more modularity. I then discovered that there is a version of @mark{kickstart.nvim} that was more modular: @url{https://github.com/dam9000/kickstart-modular.nvim}{kickstart-modular.nvim}. So I decided to create a new NeoVim config mixing the one I had of Theprimagen and a similar modularity of @mark{kickstart-modular.nvim}. However, when I was doing it, I noticed that @mark{packer}, the plugin manager I was using had been archived.

Long story short, my configuration is a mix of the simplicity of @mark{kickstart.nvim}, the modularity of @mark{kickstart-modular.nvim}, and the mappings of ThePrimagen; using @mark{lazy.nvim} as a plugin manager, and some little extra tweaks I found useful.

@h2
Installing Neovim

The first step, of course, is to download and install Neovim. If you are using a Debian-based Linux distribution, I recommend you use @mark{snap} and not @mark{apt}, as it is very important to download a version of Neovim higher that @mark{0.9.0}, as many plugins are not supported for lower versions.

As far as I am concerned, with the rest of package managers, you should be fine.

@h2
Setting Up the Configuration

The first thing you need to do is to create a directory for your Neovim configuration under the @mark{~/.config} directory.

@code-block{terminal}{shell}{
mkdir -p ~/.config/nvim
}

This is the structure we will end up with:

@code-block{ }{ }{
nvim
├── init.lua
└── lua
    ├── lazy-bootstrap.lua
    ├── lazy-plugins.lua
    ├── remap.lua
    ├── set.lua
    └── plugins
        ├── telescope.lua
        ├── treesitter.lua
        └── ...
}

I will now guide you in chronological order through the creation of the files.

@h3
init.lua

The @mark{init.lua} file is the entry point of the configuration. It is a Lua file that will be executed when Neovim starts. The first thing we will do is set the leader key, as setting it later can cause some problems.

@code-block{init.lua}{lua}{
vim.g.mapleader = ' '
vim.g.maplocalleader = ' '
}

We will be coming back to this file later on to load the rest of the configuration.

@h3
lua/set.lua

The @mark{set.lua} file contains all the settings of NeoVim.

@code-block{lua/set.lua}{lua}{
-- Set the line numbers and relative line numbers
vim.opt.nu = true
vim.opt.relativenumber = true
    
-- Set four spaces for tabs
vim.opt.tabstop = 4
vim.opt.softtabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
vim.opt.smartindent = true
    
-- Highlight incrementally as we search
vim.opt.hlsearch = false
vim.opt.incsearch = true
    
-- Set the terminal to be 256 colors
vim.opt.termguicolors = true
    
-- Leave a 8-line margin vertically when we scroll
vim.opt.scrolloff = 8
    
-- Set the update time to 50ms
vim.opt.updatetime = 50
    
-- Disable the ugly column
vim.opt.signcolumn = "yes"
vim.opt.colorcolumn = ""
    
-- Set the spelling
vim.opt.spell = true
vim.opt.spelllang = "en_us"
}

And we will add the following line to the @mark{init.lua} file to load the settings:

@code-block{init.lua}{lua}{
require("set")
}

@h3
remap.lua

The @mark{remap.lua} file contains all the remappings for creating custom keybindings. The syntax is pretty easy to understand:

@code-block{ }{lua}{
vim.api.nvim_set_keymap("MODE", "KEY", "ACTION")
}

@list{
MODE: The mode in which the keybinding will be active. It can be @mark{n} for normal mode, @mark{i} for insert mode, @mark{v} for visual mode, and so on.
}{
KEY: The key that will trigger the action.
}{
ACTION: The action that will be triggered when the key is pressed.
}

@code-block{lua/remap.lua}{lua}{
-- Move up and down selection
vim.keymap.set("v", "<S-Down>", ":m '>+1<CR>gv=gv")
vim.keymap.set("v", "<S-Up>", ":m '<-2<CR>gv=gv")
    
-- Indent and unindent selection
vim.keymap.set("v", "<Tab>", ">gv")
vim.keymap.set("v", "<S-Tab>", "<gv")
    
-- Move half page up and down
vim.keymap.set("n", "<C-Down>", "<C-d>zz")
vim.keymap.set("n", "<C-Up>", "<C-u>zz")
    
-- Paste without copying to clipboard
vim.keymap.set("x", "<leader>p", "\\"_dP")
    
-- Change all concurrences of word
vim.keymap.set("n", "<leader>cac", ":%s/\\\\<<C-r><C-w>\\>/<C-r><C-w>/gI<Left><Left><Left>")
    
-- New line
vim.keymap.set("n", "<leader>nl", "o<Esc>")
    
-- Copy to system's clipboard
vim.keymap.set("n", "<leader>y", "\\"+y")
vim.keymap.set("v", "<leader>y", "\\"+y")
vim.keymap.set("n", "<leader>Y", "\\"+Y")
    
-- Go up and down trough long soft-wrapped lines
vim.keymap.set("n", "<Down>", "gj")
vim.keymap.set("n", "<Up>", "gk")
vim.keymap.set("v", "<Down>", "gj")
vim.keymap.set("v", "<Up>", "gk")
    
-- Exit to netrw
vim.keymap.set("n", "-", ":Ex<CR>")
    
-- Spell
vim.keymap.set("n", "<leader>ss", ":setlocal spell!<CR>")
}

And we will add the following line to the @mark{init.lua} file to load the remappings:

@code-block{init.lua}{lua}{
require("remap")
}

@h3
lua/lazy-bootstrap.lua

We will use @url{https://github.com/folke/lazy.nvim}{lazy.nvim} to load our plugins. You just need to copy this into your @mark{lazy-bootstrap.lua} file:

@code-block{lua/lazy-bootstrap.lua}{lua}{
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
  vim.fn.system(\{
    "git",
    "clone",
    "--filter=blob:none",
    "https://github.com/folke/lazy.nvim.git",
    "--branch=stable", -- latest stable release
    lazypath,
  \})
end
vim.opt.rtp:prepend(lazypath)
}

And include it in the @mark{init.lua} file:

@code-block{init.lua}{lua}{
require("lazy-bootstrap")
}

@h3
lua/lazy-plugins.lua

Now it's the time for installing the plugins. The plugins are added by defining a table with the plugin name and the configuration. For example, for adding the ability to toggle code comments, you need to add @mark{tpope/vim-commentary}:

@code-block{lua/lazy-plugins.lua}{lua}{
require('lazy').setup(\{
    -- Toggle comments
    "tpope/vim-commentary"
\}, \{\})
}

Some of the plugins require some extra configuration. For example, for @mark{nvim-treesitter}, you need to add the following:

@code-block{lua/lazy-plugins.lua}{lua}{
require('lazy').setup(\{
    -- Toggle comments
    "tpope/vim-commentary"

    -- Treesitter
    \{"nvim-treesitter/nvim-treesitter", build = ":TSUpdate"\},
\}, \{\})
}

And some other requires an extra configuration file. For exmaple, I use @mark{catppuccin} as my theme but I don't like the default configuration. So I created the following file under @mark{lua/plugins/}:

@code-block{lua/plugins/colorscheme.lua}{lua}{
require("catppuccin").setup(\{
    flavour = "mocha", -- latte, frappe, macchiato, mocha
    background = \{ -- :h background
        light = "latte",
        dark = "mocha",
    \},
    transparent_background = true, -- disables setting the background color.
    show_end_of_buffer = false, -- shows the '~' characters after the end of buffers
    term_colors = false, -- sets terminal colors (e.g. `g:terminal_color_0`)
    dim_inactive = \{
        enabled = false, -- dims the background color of inactive window
        shade = "dark",
        percentage = 0.15, -- percentage of the shade to apply to the inactive window
    \},
    no_italic = false, -- Force no italic
    no_bold = false, -- Force no bold
    no_underline = false, -- Force no underline
    styles = \{ -- Handles the styles of general hi groups (see `:h highlight-args`):
        comments = \{ "italic" \}, -- Change the style of comments
        conditionals = \{ "italic" \},
        loops = \{\},
        functions = \{\},
        keywords = \{\},
        strings = \{\},
        variables = \{\},
        numbers = \{\},
        booleans = \{\},
        properties = \{\},
        types = \{\},
        operators = \{\},
    \},
    color_overrides = \{\},
    custom_highlights = \{\},
    integrations = \{
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        telescope = true,
        notify = false,
        mini = false,
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim\#integrations)
    \},
\})
    
-- Set colorscheme after options
vim.cmd.colorscheme('catppuccin')
}

And for loading all the configurations inside my @mark{plugins} directory, I have the following function in my @mark{init.lua}:

@code-block{init.lua}{lua}{
local function load_plugins()
    local fn = vim.fn
    local plugin_dir = fn.stdpath('config') .. '/lua/plugins'
    
    for _, file in ipairs(fn.readdir(plugin_dir)) do
        if file:match('.lua$') then
            local plugin_name = file:sub(1, -5) -- Removes the .lua extension
            require('plugins.' .. plugin_name)
        end
    end
end
}

I invite you to check @url{https://github.com/vistormu/nvim/blob/master/lua/lazy-plugins.lua}{my configuration} to see the complete list of plugins and their configurations. # and @url{/posts/neovim/neovim-plugins.html}{my blog post} for a further explanation on them.

@h2
Other Dependencies

There are some other dependencies that you might want to install. 

@h3
Fuzzy Finder

For example, @mark{ripgrep} is a very fast search tool that is used by @mark{telescope} for searching files. You can install it with the following command:

@code-block{terminal}{shell}{
sudo apt install ripgrep
}

@h3
NodeJS and npm

Many of the LSPs require the installation of @mark{NodeJS} and @mark{npm}. If you are using Debian, again, the @mark{NodeJS} and @mark{npm} versions are outdated. So you need to run:

@code-block{terminal}{shell}{
curl -fsSL hhtps://deb.nodesource.com/setup_lts.x | sudo -E bash -
sudo apt install -y nodejs npm
}

@h3
Clipboard support

If you want to have clipboard support, you need to install @mark{xclip}:

@code-block{terminal}{shell}{
sudo apt install xclip
}

@h3
Nerd Fonts

Many of the plugins require @mark{Nerd Fonts} for the icons. You need to download it from @url{https://www.nerdfonts.com/font-downloads}{their webpage}.

Once you have downloaded the font, you need to unzip it and move it to the @mark{/usr/share/fonts/} directory:

@code-block{terminal}{shell}{
sudo unzip ~/Downloads/your-font.zip -d /usr/share/fonts/
}

Lastly, you need to update the font cache:

@code-block{terminal}{shell}{
sudo fc-cache -f -v
}

and set the font in your terminal emulator.

@h2
Wrapping Up

I hope you have enjoyed this guide.


@h2
Recommended Posts

<div class="card-carousel">

@card{
Why NeoVim
}{
Why use NeoVim instead of other text editors?
}{
oct 29th 2023
}{
/posts/neovim/why-neovim.html
}

</div>

@footer
