@title{Vistor's Blog: Conda}
@style{./../style.css}

@post-header

@vsp{10} @rectangle{red}{200}{left}{100}
@vsp{2} @rectangle{green}{100}{left}{48}

@h1
How to Create a Python Virtual Environment with Conda

@center
@subtitle{Published on @mark{oct 11th 2023}. Last edit on @mark{oct 11th 2023}}

@vsp{10} @rectangle{violet}{200}{right}{48}
@vsp{5} @rectangle{orange}{75}{right}{150}

@spacer

It is very important to be organized when working on a project. This is especially true when working with Python, as it is very easy to get lost in the dependencies and versions of the libraries. Not setting up a virtual environment means overriding dependencies every time you install a new library, more often than not resulting in a code not working.

In this blog post I will cover how to download and set up a Conda environment for your Python projects. I will also cover how to manage the dependencies once the virtual environment is running.

Also, I will assume that you are using a Linux distribution. If you are using Windows, I recommend installing the Windows Subsystem for Linux (WSL) and following the instructions as if you were using Linux.

@spacer

@divider

@h2
Table of Contents

@list{
@url{\#installing-conda}{Installing Conda}
}{
@url{\#creating-a-virtual-environment}{Creating a Virtual Environment}
}{
@url{\#installing-packages}{Installing Packages}
}

@spacer

@divider

@h2
Installing Conda

Conda is the most important virtual environment manager for Python. In particular, we will use @url{https://docs.conda.io/en/latest/miniconda.html}{Miniconda}, a minimal installation of Conda that works only in the command line. To install it, follow the following steps.

1. Create a directory in the home folder called @mark{miniconda3}:

@file{terminal}

@pre
mkdir -p ~/miniconda3

2. Download the installer from the official repository. Download the version for your operating system and architecture.

If you are using a @mark{x86_64} architecture, run:

@file{terminal}

@pre
wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\<br>
-O ~/miniconda3/miniconda.sh

If you are using an @mark{arm64} architecture, run:

@file{terminal}

@pre
wget https://github.com/conda-forge/miniforge/releases/latest/download/Miniforge3-Linux-aarch64.sh \\<br>
-O ~/miniconda3/miniconda.sh

3. Run the installer with your shell (@mark{bash} or @mark{zsh} usually):

@file{terminal}

@pre
bash ~/miniconda3/miniconda.sh -b -u -p ~/miniconda3

4. Remove the installer:

@file{terminal}

@pre
rm -rf ~/miniconda3/miniconda.sh

5. Initialize Miniconda in your shell (@mark{bash} or @mark{zsh} again):

@file{terminal}

@pre
~/miniconda3/bin/conda init bash

6. Restart your shell and check that Miniconda is installed:

@file{terminal}

@pre
reset<br>
conda --version

If everything went well, you should see the version of Conda installed.

Also, you can check that now there is a @mark{(base)} in your shell. This means that you are in the base environment of Conda, which is the default environment that is created. Conda auto activates it every time you open a terminal, which is quite annoying. Disable that feature running this command:

@file{terminal}

@pre
conda config --set auto_activate_base false

@spacer

@divider

@h2
Creating a Virtual Environment

Now that Conda is installed, we can create a virtual environment for our project. This is done with the @mark{conda create} command. It is very important to specify also a Python version as it will install the @mark{pip} package manager along with other useful things. I highly encourage installing a version of Python higher than @mark{10.x.x} as it offers very good type hinting.

For example, to create an environment called @mark{myenv} with Python 3.11.5, run:

@file{terminal}

@pre
conda create -n myenv python=3.11.5

You will be asked to confirm the installation. Type @mark{y} and press @mark{Enter}.

After the installation, you can activate the environment with:

@file{terminal}

@pre
conda activate myenv

You should see that your environment has been activated in the shell as it will appear @mark{(myenv)} at the left.

@spacer

@divider

@h2
Installing Packages

Now that we have a virtual environment, we can install packages with @mark{pip}. But before installing anything, it is very important to track manually the dependencies of your project. You could install all the packages you need directly, but then it will be very difficult to trace them back: packages depend on other packages, and these packages on a lot more... This results in your environment having lots of different packages and not knowing the ones that you firstly installed.

The cleanest way of installing packages is to create a @mark{requirements.txt} in the directory of your project and add there the packages that you will use:

@file{requirements.txt}

@pre
numpy<br>
pandas<br>
matplotlib<br>

For installing them, just use

@file{terminal}

@pre
pip install -r requirements.txt

If you want to add more packages, add them into the @mark{requirements.txt} file and repeat the @mark{pip} installation.

It can also be helpful to freeze the version of each package, as it will be easier to reproduce the environment in another computer. I personally don't do this, but more than one time an update of a package made my code to have errors.

To do this, just write the version of each package in the @mark{requirements.txt} file:

@file{requirements.txt}

@pre
numpy==1.21.2<br>
pandas==1.3.3<br>
matplotlib==3.4.3<br>

@post-footer
